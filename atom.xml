<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://orangepure.github.io</id>
    <title>一只大橘</title>
    <updated>2022-01-21T03:43:48.535Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://orangepure.github.io"/>
    <link rel="self" href="https://orangepure.github.io/atom.xml"/>
    <subtitle>这是一只老菜猫了</subtitle>
    <logo>https://orangepure.github.io/images/avatar.png</logo>
    <icon>https://orangepure.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 一只大橘</rights>
    <entry>
        <title type="html"><![CDATA[B - Ignatius and the Princess IV]]></title>
        <id>https://orangepure.github.io/post/hIScuXHGH/</id>
        <link href="https://orangepure.github.io/post/hIScuXHGH/">
        </link>
        <updated>2020-08-04T06:12:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="problem">Problem</h3>
<p>&quot;OK, you are not too bad, em... But you can never pass the next test.&quot; feng5166 says.<!-- more --><br>
&quot;I will tell you an odd number N, and then N integers. There will be a special integer among them, you have to tell me which integer is the special one after I tell you all the integers.&quot; feng5166 says.<br>
&quot;But what is the characteristic of the special integer?&quot; Ignatius asks.<br>
&quot;The integer will appear at least (N+1)/2 times. If you can't find the right integer, I will kill the Princess, and you will be my dinner, too. Hahahaha.....&quot; feng5166 says.<br>
Can you find the special integer for Ignatius?</p>
<h3 id="vj传送门"><a href="https://vjudge.net/problem/HDU-1029">VJ传送门</a></h3>
<h3 id="input">Input</h3>
<p>The input contains several test cases. Each test case contains two lines. The first line consists of an odd integer N(1&lt;=N&lt;=999999) which indicate the number of the integers feng5166 will tell our hero. The second line contains the N integers. The input is terminated by the end of file.</p>
<h3 id="output">Output</h3>
<p>For each test case, you have to output only one line which contains the special number you have found.</p>
<h3 id="sample-input">Sample Input</h3>
<p>5<br>
1 3 2 3 3<br>
11<br>
1 1 1 1 1 5 5 5 5 5 5<br>
7<br>
1 1 1 1 1 1 1</p>
<h3 id="sample-output">Sample Output</h3>
<p>3<br>
5<br>
1</p>
<h3 id="题解">题解：</h3>
<p>壹：直接开数组模拟计数，看题目N的上界99999，随便开了个1000000的数组（理想情况下50000足矣），居然过了！<br>
贰：设time，若输入的数与当前数（flag）不同time--，相同则time++；time==0时，更换flag，继续。<br>
叁：sort排序，直接输出第（n+1）/2个</p>
<h3 id="ac代码">AC代码：</h3>
<p>壹：</p>
<pre><code class="language-C++">#include&lt;iostream&gt;
#include&lt;stdio.h&gt; 
using namespace std;
int main(){
	int s,m,max,ans,d;
	while(cin&gt;&gt;s){
		int a[1000000]={0};d=0;
		for(int i=1;i&lt;=s;i++){
			scanf(&quot;%d&quot;,&amp;m);
			a[m]++;
			if(m&gt;d) //d记录最大出现的数字，减少后面的遍历（其实后面遍历可以省略，在这里直接比较）
			d=m;
		}
		max=a[0];ans=0;
		for(int i=1;i&lt;=d;i++){
			if(a[i]&gt;max){
			max=a[i];
			ans=i;}
		}
		cout&lt;&lt;ans&lt;&lt;endl;
	}
}
</code></pre>
<p>贰：</p>
<pre><code class="language-C++">#include &lt;iostream&gt;
using namespace std;
int main()
{
    int n;
    int m;
    int c;
    while(cin&gt;&gt;n)
    {
        int time=0;
        while(n--)
        {
            cin&gt;&gt;m;
            if(time&lt;=0)
                c=m;
            m==c?++time:--time;
        }
        cout&lt;&lt;c&lt;&lt;endl;
    }
} </code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[A - Max Sum Plus Plus]]></title>
        <id>https://orangepure.github.io/post/XERFIPvhG/</id>
        <link href="https://orangepure.github.io/post/XERFIPvhG/">
        </link>
        <updated>2020-08-03T08:26:40.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Now I think you have got an AC in Ignatius.L's &quot;Max Sum&quot; problem. To be a brave ACMer, we always challenge ourselves to more difficult problems. Now you are faced with a more difficult problem.Given a consecutive number sequence S1, S2, S3, S4 ... Sx, ... Sn (1 ≤ x ≤ n ≤ 1,000,000, -32768 ≤ Sx ≤ 32767). We define a function sum(i, j) = Si + ... + Sj (1 ≤ i ≤ j ≤ n).Now given an integer m (m &gt; 0), your task is to find m pairs of i and j which make sum(i1, j1) + sum(i2, j2) + sum(i3, j3) + ... + sum(im, jm) maximal (ix ≤ iy ≤ jx or ix ≤ jy ≤ jx is not allowed).But I`m lazy, I don't want to write a special-judge module, so you don't have to output m pairs of i and j, just output the maximal summation of sum(ix, jx)(1 ≤ x ≤ m) instead. <sup>_</sup></p>
<h3 id="input">Input</h3>
<p>Each test case will begin with two integers m and n, followed by n integers S1, S2, S3 ... Sn.Process to the end of file.</p>
<h3 id="output">Output</h3>
<p>Output the maximal summation described above in one line.</p>
<h3 id="sample-input">Sample Input</h3>
<p>1 3 1 2 3<br>
2 6 -1 4 -2 3 -2 3</p>
<h3 id="sample-output">Sample Output</h3>
<p>6<br>
8</p>
<h3 id="hint">Hint</h3>
<p>Huge input, scanf and dynamic programming is recommended.</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[20暑VJ训练—最少拦截系统]]></title>
        <id>https://orangepure.github.io/post/EWOXcr714/</id>
        <link href="https://orangepure.github.io/post/EWOXcr714/">
        </link>
        <updated>2020-08-03T06:31:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="题面">题面</h3>
<p>某国为了防御敌国的导弹袭击,发展出一种导弹拦截系统.但是这种导弹拦截系统有一个缺陷:虽然它的第一发炮弹能够到达任意的高度,但是以后每一发炮弹都不能超过前一发的高度.<!-- more -->某天,雷达捕捉到敌国的导弹来袭.由于该系统还在试用阶段,所以只有一套系统,因此有可能不能拦截所有的导弹.<br>
怎么办呢?多搞几套系统呗!你说说倒蛮容易,成本呢?成本是个大问题啊.所以俺就到这里来求救了,请帮助计算一下最少需要多少套拦截系统.</p>
<h3 id="input">Input</h3>
<p>输入若干组数据.每组数据包括:导弹总个数(正整数),导弹依此飞来的高度(雷达给出的高度数据是不大于30000的正整数,用空格分隔)</p>
<h3 id="output">Output</h3>
<p>对应每组数据输出拦截所有导弹最少要配备多少套这种导弹拦截系统.</p>
<h3 id="sample-input">Sample Input</h3>
<p>8 389 207 155 300 299 170 158 65</p>
<h3 id="sample-output">Sample Output</h3>
<p>2</p>
<p>题是归类在动态规划基础里的，但是用贪心（？）做应该更快，还可以用逆向的最长子串做。还没有用dp的方法做......</p>
<p>一开始的想法是新数据和之前的拦截器末次状态比较，选一个既比新数据大，又和新数据相差最小的拦截器。后来发现不用判断数据相差的大小，因为拦截器数组在起初就是从小到大排列的，因为比当前最后一个拦截器大的会在后面新建一个（而且会自动维护，因为新数据选择的必然是第一个比它大的拦截器）。</p>
<h2 id="ac代码">AC代码：</h2>
<pre><code class="language-C++">#include&lt;iostream&gt;
using namespace std;
int a[1000];  //数组大小是随便打的，不会wa
int main()
{
	int s,h,p,n;
	while(cin&gt;&gt;s){ //注意是多数据输入，s是每组的数据数
		n=0;
	for(int i=1;i&lt;=s;i++){
		cin&gt;&gt;h; //h是高度
		p=0; //p用来判断是否能被之前的拦截器拦截
		for(int t=0;t&lt;n;t++){ //n代表拦截器的数量
			if(a[t]&gt;=h){
				a[t]=h;
				p=1;
				break;
			}
		}
		if(p==0) //不能拦截就多引入一套，n++
		a[n++]=h;
	}
	cout&lt;&lt;n&lt;&lt;endl;
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一篇物理小课题]]></title>
        <id>https://orangepure.github.io/post/JCrxK3DbJ/</id>
        <link href="https://orangepure.github.io/post/JCrxK3DbJ/">
        </link>
        <updated>2020-04-27T03:20:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="center汽车想获得最大的引擎力是放在高档位还是低档位有利center"><center>汽车想获得最大的引擎力，是放在高档位还是低档位有利？</center></h2>
<h2 id="center-汽车动力的简单分析center-more-"><center>  ——— 汽车动力的简单分析</center><!-- more --></h2>
<h4 id="p-alignright作者五舍b657p"><p align="right">作者：五舍B657</p></h4>
<h2 id="1如何增大引擎力">1.如何增大引擎力？</h2>
<p>我们高中学过公式：P=Fv，从这个公式来看，当P恒定时，v比较小时，F就比较大。但是，我们今天讨论的是牵引力与档位的关系。<br>
那我们就先看看各档位之间有什么不同。档位是汽车变速箱手拉杆在不同位置时，变速箱通过不同齿轮的结合产生变速变矩。低档位往往是低速高矩，高档位往往是高速低矩。这里的“速”指的是转速n，“矩”指的是扭矩τ。其实，功率和转速、扭矩的关系可以由P=Fv来推导。</p>
<blockquote>
<center>∵P=F·v</br>
∴P=F·n·2πr</br>
∴P=2π·τ·n</center></br>
</blockquote>
<p>由上式我们可知，在P恒定的情况下，转速n越小，力矩τ越大,同时扭力即引擎力越大。</p>
<h2 id="2汽车降速增扭的具体实现">2.汽车降速增扭的具体实现</h2>
<p>我们知道，汽车的内部结构精密。最初的传动力从引擎内气缸的曲轴开始传起，通过变速器到车轴，实现了提供牵引力的过程。我们不妨简化一下这个结构，把其中的一部分看成两个齿轮（如下图）。<br>
<img src="https://orangepure.github.io/post-images/1587958539312.png" alt="" width="500" height="288" loading="lazy"><br>
主动轮和从动轮上的力是相同的，所以当从动轮的直径比主动轮大时，从动轮的角速度变小，而力矩由于力的大小不变而半径变大，使得从动轮的力矩变大。这就是汽车变速器低档位时，降速增扭的具体实现。</p>
<h2 id="3汽车牵引力和扭矩之间的关系">3.汽车牵引力和扭矩之间的关系</h2>
<p>另外，汽车有传动比和齿数比两个概念，分别成反比。传动比用i来表示。有</p>
<blockquote>
<figure data-type="image" tabindex="1"><img src="https://orangepure.github.io/post-images/1587958696524.JPG" alt="" width="200" height="45" loading="lazy"></figure>
</blockquote>
<p>n为转速而z为齿轮齿数，在不计损耗的情况下，可以得到有</p>
<blockquote>
<figure data-type="image" tabindex="2"><img src="https://orangepure.github.io/post-images/1587958803307.JPG" alt="" width="180" height="60" loading="lazy"></figure>
</blockquote>
<h2 id="4扭矩-扭力-马力之间的不同">4.扭矩、扭力、马力之间的不同</h2>
<p>其实，大家这些年说的扭矩和扭力是同一个玩意。扭力其实只是比较形象的俗称。而马力呢，则是汽车功率的计量单位，“马力(hp)”这个单位才是詹姆斯·瓦特提出，而单位“瓦特”则是由科学促进会纪念瓦特而命名的。一公制马力为735瓦特，即75千克力·米。</p>
<h2 id="5拓展马力最大的民用车">5.拓展：马力最大的民用车</h2>
<p><img src="https://orangepure.github.io/post-images/1587959930751.png" alt="" loading="lazy"><br>
世界上马力 <s>可能</s> 最大的 <s>电动</s> 车：Rimac C_Two。达到了惊人的1914hp！！ 0~100km/h仅仅需要1.85s。<s>要知道一般家用车的马力都处于200左右,很多不会超过200hp</s> 其动力之澎湃可想而知。<br>
<em>这是很久之前写的一小时速成文（雾</em><br>
<font color=#808080><em>注：图片均来源于网络,如有版权问题请联系删除</em></font></p>
<p id='music'>1426362296</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea（这是例文）]]></title>
        <id>https://orangepure.github.io/post/hello-gridea/</id>
        <link href="https://orangepure.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
<p id='music'>1381578834 </p>]]></content>
    </entry>
</feed>